import { db } from "@/lib/firebase";
import { collection, getDocs, addDoc, doc, getDoc } from "firebase/firestore";

export type Customer = {
    id: string;
    name: string;
    phone: string;
    email?: string;
    idNumber?: string; // CÃ©dula
    taxId?: string; // RNC
    company?: string;
    signedUp: string;
    avatar: string;
};

// Omit 'id' for new customers as it will be auto-generated by Firestore
export type NewCustomer = Omit<Customer, 'id' | 'signedUp' | 'avatar'>;


export async function getCustomers(): Promise<Customer[]> {
    const customersCol = collection(db, 'customers');
    const customerSnapshot = await getDocs(customersCol);
    const customerList = customerSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Customer));
    return customerList;
}

export async function getCustomerById(id: string): Promise<Customer | null> {
    const customerDocRef = doc(db, 'customers', id);
    const customerSnapshot = await getDoc(customerDocRef);
    if (customerSnapshot.exists()) {
        return { id: customerSnapshot.id, ...customerSnapshot.data() } as Customer;
    }
    return null;
}

export async function addCustomer(customerData: Omit<NewCustomer, 'signedUp' | 'avatar'>): Promise<Customer> {
    const customersCol = collection(db, 'customers');
    const newCustomerData = {
        ...customerData,
        signedUp: new Date().toISOString().split('T')[0],
        avatar: `https://picsum.photos/seed/avatar${Math.floor(Math.random() * 100)}/100/100`
    }
    const docRef = await addDoc(customersCol, newCustomerData);
    return { id: docRef.id, ...newCustomerData };
}
