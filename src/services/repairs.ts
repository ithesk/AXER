"use server";

import { db } from "@/lib/firebase";
import { collection, getDocs, doc, setDoc, writeBatch, getDoc, addDoc, updateDoc } from "firebase/firestore";

export type RepairStatus = "Cotización" | "Confirmado" | "En Reparación" | "Reparado" | "Entregado";

export type FunctionalityTestResult = "ok" | "fail" | "na";

export type FunctionalityTestResults = {
    cameraFront: FunctionalityTestResult;
    cameraBack: FunctionalityTestResult;
    chargingPort: FunctionalityTestResult;
    screen: FunctionalityTestResult;
    touch: FunctionalityTestResult;
    buttons: FunctionalityTestResult;
    earpiece: FunctionalityTestResult;
    speaker: FunctionalityTestResult;
    microphone: FunctionalityTestResult;
    wifi: FunctionalityTestResult;
    biometrics: FunctionalityTestResult;
    other?: string;
};

export type EvaluationEntry = {
    note: string;
    author: string;
    date: string; // ISO string
};

export type RepairPart = {
    id: string; // To handle keys in React
    name: string;
    price: number;
};

export type RepairQuote = {
    parts: RepairPart[];
    labor: number;
    total: number;
};

export type Repair = {
    id: string;
    customer: string;
    device: string; // This will now be the product to repair, e.g., "iPhone 14"
    technician: string;
    status: RepairStatus;
    entryDate: string; // Should be in a format that can include time, e.g., ISO string
    deviceType: 'Tablet' | 'Celular' | 'Reloj' | 'Laptop';
    problemDescription: string;
    imeiOrSn?: string;
    password?: string;
    evaluation?: EvaluationEntry[];
    functionalityTest?: FunctionalityTestResults;
    quote?: RepairQuote;
};

// Omit 'id' as it will be auto-generated by Firestore
export type NewRepair = Omit<Repair, 'id' | 'status' | 'entryDate' | 'technician' | 'evaluation' | 'quote'>;

const repairsData: Omit<Repair, 'evaluation' | 'quote' | 'functionalityTest'>[] = [
  { 
    id: "REP-001", 
    customer: "John Doe", 
    device: "iPhone 14", 
    technician: "David Williams", 
    status: "En Reparación", 
    entryDate: new Date("2024-05-10T10:00:00Z").toISOString(),
    deviceType: "Celular",
    problemDescription: "La pantalla está rota y no responde al tacto en la parte superior.",
    imeiOrSn: "356712345678901",
    password: "1234",
  },
  { 
    id: "REP-002", 
    customer: "Jane Smith", 
    device: "Samsung Galaxy S22", 
    technician: "David Williams", 
    status: "Reparado", 
    entryDate: new Date("2024-05-09T14:30:00Z").toISOString(),
    deviceType: "Celular",
    problemDescription: "La batería se descarga muy rápido, dura menos de 4 horas.",
    imeiOrSn: "359876543210987",
  },
  { 
    id: "REP-003", 
    customer: "Peter Jones", 
    device: "Google Pixel 7", 
    technician: "No Asignado", 
    status: "Cotización", 
    entryDate: new Date("2024-05-10T11:00:00Z").toISOString(),
    deviceType: "Celular",
    problemDescription: "El equipo se reinicia constantemente y no pasa del logo de Google.",
    imeiOrSn: "351234567890123",
    password: "No tiene",
  },
  { 
    id: "REP-004", 
    customer: "Mary Johnson", 
    device: "MacBook Pro 14\"", 
    technician: "David Williams", 
    status: "Confirmado", 
    entryDate: new Date("2024-05-08T18:00:00Z").toISOString(),
    deviceType: "Laptop",
    problemDescription: "El teclado no funciona después de un derrame de líquido.",
    imeiOrSn: "C02G1234H8J1",
  },
];


export async function addRepair(repairData: NewRepair) {
    const repairsCol = collection(db, 'repairs');
    // Create a new ID with a prefix
    const newId = `REP-${Date.now()}`;
    const docRef = doc(db, 'repairs', newId);

    const newDoc: Omit<Repair, 'id'> = {
        ...repairData,
        technician: "No Asignado",
        status: "Cotización",
        entryDate: new Date().toISOString(),
        evaluation: [],
        quote: {
            parts: [],
            labor: 0,
            total: 0,
        }
    }
    await setDoc(docRef, newDoc);
}

export async function getRepairs(): Promise<Repair[]> {
    const repairsCol = collection(db, 'repairs');
    const repairsSnapshot = await getDocs(repairsCol);
     if (repairsSnapshot.empty) {
        await seedRepairs();
        const seededSnapshot = await getDocs(repairsCol);
        return seededSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Repair)).sort((a, b) => new Date(b.entryDate).getTime() - new Date(a.entryDate).getTime());
    }
    const repairsList = repairsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Repair)).sort((a, b) => new Date(b.entryDate).getTime() - new Date(a.entryDate).getTime());
    return repairsList;
}

export async function getRepairById(id: string): Promise<Repair | null> {
    const repairDocRef = doc(db, 'repairs', id);
    const repairSnapshot = await getDoc(repairDocRef);

    if (repairSnapshot.exists()) {
        return { id: repairSnapshot.id, ...repairSnapshot.data() } as Repair;
    } else {
        return null;
    }
}

export async function updateRepair(id: string, data: Partial<Omit<Repair, 'id'>>) {
    const repairDocRef = doc(db, 'repairs', id);
    await updateDoc(repairDocRef, data);
    
    // Return the updated document
    const updatedDoc = await getDoc(repairDocRef);
    return { id: updatedDoc.id, ...updatedDoc.data() } as Repair;
}

export async function seedRepairs() {
    const repairsCol = collection(db, 'repairs');
    const batch = writeBatch(db);
    
    repairsData.forEach(repair => {
        const docRef = doc(repairsCol, repair.id);
        const { id, ...repairData } = repair;
        const repairDataWithDetails = {
            ...repairData,
            evaluation: [
                {
                    note: "Requiere reemplazo completo del panel frontal. La batería parece estar en buen estado.",
                    author: "David Williams",
                    date: new Date("2024-05-10T10:05:00Z").toISOString()
                }
            ],
            quote: {
                parts: [
                    { id: 'part-1', name: "Pantalla iPhone 14", price: 150 },
                ],
                labor: 50,
                total: 200,
            },
            functionalityTest: {
                cameraFront: 'ok',
                cameraBack: 'ok',
                chargingPort: 'ok',
                screen: 'fail',
                touch: 'fail',
                buttons: 'ok',
                earpiece: 'ok',
                speaker: 'ok',
                microphone: 'ok',
                wifi: 'ok',
                biometrics: 'ok',
                other: 'Pantalla con manchas y tactil no funciona en la parte superior'
            }
        };

        batch.set(docRef, repairDataWithDetails);
    });

    await batch.commit();
}
